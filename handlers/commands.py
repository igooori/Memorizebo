from aiogram import Router #—Ä–æ—É—Ç–µ—Ä
from aiogram.types  import Message,InlineKeyboardButton,InlineKeyboardMarkup,BotCommand #–∏–Ω–ª–∞–∏–Ω –∫–Ω–æ–ø–∫–∏ –∏ message
from aiogram.filters import Command #–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
import os #–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏?
from sqlalchemy.orm import Session #–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sqlalchemy –∏ –∏–º–ø–æ—Ä—Ç Session
from utils.zip_archiver import zip_archive #–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
from sqlalchemy import create_engine
from models.memory import Memori #–∏–º–ø–æ—Ä—Ç –±–¥ 
from aiogram.types import BufferedInputFile
router = Router()


help_text = """–í–∞—à –∞—Ä—Ö–∏–≤ —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≥–æ—Ç–æ–≤! üíæ

–ß—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ñ–∞–π–ª—ã –≤ –æ—Ç—á–µ—Ç–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 2 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:

1.  –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ (–∫–ª–∏–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–∑–≤–ª–µ—á—å –≤—Å–µ...¬ª –∏–ª–∏ ¬´–†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å¬ª).
2.  –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª memories_XX.html (–≥–¥–µ XX ‚Äî –≤–∞—à ID) –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.



‚ùå –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ HTML-—Ñ–∞–π–ª –ø—Ä—è–º–æ –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞."""

commands_for_menu = [
    BotCommand(command='/start', description='üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É / –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'),
    BotCommand(command='/help', description='‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'),
    BotCommand(command='/export', description='üìÇ –ü–æ–ª—É—á–∏—Ç—å –º–æ–π ZIP-–∞—Ä—Ö–∏–≤ —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏'),
    BotCommand(command='/clear', description='‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞'),
]


@router.message(Command('start')) #–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start(message:Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –∫–∞–∫ —Ç–≤–æ–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ /export –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–≥–æ –∞—Ä—Ö–∏–≤–∞.')#—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(Command('help'))
async def help(message:Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–π /search <—Å–ª–æ–≤–æ> –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞. /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ –≤ ZIP.')
@router.message(Command('search')) #–¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–∞
async def search(message:Message):
    text = message.text.split(maxsplit=1)
    if len(text) <2:
        await message.answer('–Ω–∞–ø–∏—à–∏—Ç–µ —Ç–∞–∫ /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
        return
    searc = text[1].strip()
    engine = create_engine('sqlite:///memory.db')
    with Session(bind=engine) as db:
        memori = db.query(Memori).filter(Memori.user_id == message.from_user.id,
                                 Memori.original_name.ilike(f'%{searc}%')
                                 ).order_by(Memori.created_at.desc()).all()
    poisk = f'–Ω–∞—à–µ–ª{len(memori)}'
    for i,memor in enumerate(memori,1):
        if memor.type == 'photo':
            poisk += f'{i} {memor.original_name}'
        else:
            poisk += f'{i} {memor.original_name}'
    await message.answer(poisk)

@router.message(Command('export'))
async def export(message:Message):
    engine = create_engine('sqlite:///memory.db')
    with Session(bind=engine) as db:
        memories = db.query(Memori).filter(
            Memori.user_id == message.from_user.id
        ).all()

    zip_fl = zip_archive(message.from_user.id,memories)
    with open(zip_fl,'rb') as f:
        zip_data = f.read()
    document = BufferedInputFile(zip_data,filename='memories_arh.zip')
    await message.answer_document(document=document,caption='–≤–∞—à –∞—Ä—Ö–∏–≤')
    os.remove(zip_fl)
    await message.answer(f'{help_text}')
@router.message(Command('clear'))
async def clear(message:Message):
    id_use = message.from_user.id
    engine = create_engine('sqlite:///memory.db')
    with Session(bind=engine) as db:
        prove_id = db.query(Memori).filter(Memori.user_id == id_use).all
        if not prove_id:
            await message.answer('‚ùå —É —Ç–µ–±—è –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ')
        else:
            for file in prove_id:
                db.delete(file)
                await message.answer('–≤—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã')
            db.commit()